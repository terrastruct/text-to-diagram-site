---
fileTypes:
  - mermaid
patterns:
  - include: '#mermaid'
repository:
  mermaid:
    patterns:
      - comment: Class Diagram
  begin: ^\s*(classDiagram)
  beginCaptures:
    '1':
      name: keyword.control.mermaid
  patterns:
    - match: \%%.*
      name: comment
    - comment: '(class name) ("multiplicity relationship")? (relationship) ("multiplicity relationship")? (class name) :? (labelText)?'
      match: !regex |-
        ([\w-]+) # class name
        \s("(?:\d+|\*|0..\d+|1..\d+|1..\*)")? # multiplicity relationship
        \s?(--o|--\*|\<--|--\>|<\.\.|\.\.\>|\<\|\.\.|\.\.\|\>|\<\|--|--\|>|--\*|--|\.\.|\*--|o--) # relationship
        \s("(?:\d+|\*|0..\d+|1..\d+|1..\*)")? # multiplicity relationship
        \s?([\w-]+) # class name
      \s?(:)? # :
        \s(.*)$ # label text
      captures:
        '1':
          name: entity.name.type.class.mermaid
        '2':
          name: keyword.control.mermaid
        '3':
          name: keyword.control.mermaid
        '4':
          name: keyword.control.mermaid
        '5':
          name: entity.name.type.class.mermaid
        '6':
          name: keyword.control.mermaid
        '7':
          name: string
    - comment: '(class name) : (visibility)?(function)( (function param/generic param)? )(classifier)? (return/generic return)?$'
      match: !regex |-
        ([\w-]+) # class name
      \s?(:) # :
        \s([\+~#-])? # visibility
        ([\w-]+) # function name
        (\() # (
        ([\w-]+)? # function param
        (~)? # ~
        ([\w-]+)? # generic function param
        (~)? # ~
        \s?([\w-]+)? # function name
        (\)) # )
        ([*\$])? # classifier
        \s?([\w-]+)? # return type
        (~)? # ~
        ([\w-]+)? # generic return type
        (~)?$ # ~
      captures:
        '1':
          name: entity.name.type.class.mermaid
        '2':
          name: keyword.control.mermaid
        '3':
          name: keyword.control.mermaid
        '4':
          name: entity.name.function.mermaid
        '5':
          name: punctuation.parenthesis.open.mermaid
        '6':
          name: storage.type.mermaid
        '7':
          name: punctuation.definition.typeparameters.begin.mermaid
        '8':
          name: storage.type.mermaid
        '9':
          name: punctuation.definition.typeparameters.end.mermaid
        '10':
          name: entity.name.variable.parameter.mermaid
        '11':
          name: punctuation.parenthesis.closed.mermaid
        '12':
          name: keyword.control.mermaid
        '13':
          name: storage.type.mermaid
        '14':
          name: punctuation.definition.typeparameters.begin.mermaid
        '15':
          name: storage.type.mermaid
        '16':
          name: punctuation.definition.typeparameters.end.mermaid
    - comment: '(class name) : (visibility)?(datatype/generic data type) (attribute name)$'
      match: !regex |-
        ([\w-]+) # class name
      \s?(:) # :
        \s([\+~#-])? # visibility
        ([\w-]+) # datatype
        (~)? # ~
        ([\w-]+)? # datatype
        (~)? # ~
        \s([\w-]+)?$ # attribute name
      captures:
        '1':
          name: entity.name.type.class.mermaid
        '2':
          name: keyword.control.mermaid
        '3':
          name: keyword.control.mermaid
        '4':
          name: storage.type.mermaid
        '5':
          name: punctuation.definition.typeparameters.begin.mermaid
        '6':
          name: storage.type.mermaid
        '7':
          name: punctuation.definition.typeparameters.end.mermaid
        '8':
          name: entity.name.variable.field.mermaid
    - comment: '<<(Annotation)>> (class name)'
      match: !regex |-
        (<<) # <<
        ([\w-]+) # annotation
        (>>) # >>
        \s?([\w-]+)? # class name
      captures:
        '1':
          name: punctuation.definition.typeparameters.begin.mermaid
        '2':
          name: storage.type.mermaid
        '3':
          name: punctuation.definition.typeparameters.end.mermaid
        '4':
          name: entity.name.type.class.mermaid
    - comment: 'class (class name) ~?(generic type)?~? ({)'
      begin: !regex |-
        (class)\s+ #class
        ([\w-]+) # class name
        (~)? # ~
        ([\w-]+)? # generic type name
        (~)? # ~
        \s?({) # begin bracket
      beginCaptures:
        '1':
          name: keyword.control.mermaid
        '2':
          name: entity.name.type.class.mermaid
        '3':
          name: punctuation.definition.typeparameters.begin.mermaid
        '4':
          name: storage.type.mermaid
        '5':
          name: punctuation.definition.typeparameters.end.mermaid
        '6':
          name: keyword.control.mermaid
      patterns:
        - match: \%%.*
          name: comment
        - comment: '(visibility)?(function)( (function param/generic param)? )(classifier)? (return/generic return)?$'
          begin: !regex |-
            \s([\+~#-])? # visibility
            ([\w-]+) # function name
            (\() # (
          beginCaptures:
            '1':
              name: keyword.control.mermaid
            '2':
              name: entity.name.function.mermaid
            '3':
              name: punctuation.parenthesis.open.mermaid
          patterns:
            - comment: (TBD)
              match: !regex |-
                \s*,?\s*([\w-]+)? # function param
                (~)? # ~
                ([\w-]+)? # generic function param
                (~)? # ~
                \s?([\w-]+)? # function name
              captures:
                '1':
                  name: storage.type.mermaid
                '2':
                  name: punctuation.definition.typeparameters.begin.mermaid
                '3':
                  name: storage.type.mermaid
                '4':
                  name: punctuation.definition.typeparameters.end.mermaid
                '5':
                  name: entity.name.variable.parameter.mermaid
          end: !regex |-
            (\)) # )
            ([*\$])? # classifier
            \s?([\w-]+)? # return type
            (~)? # ~
            ([\w-]+)? # generic return type
            (~)?$ # ~
          endCaptures:
            '1':
              name: punctuation.parenthesis.closed.mermaid
            '2':
              name: keyword.control.mermaid
            '3':
              name: storage.type.mermaid
            '4':
              name: punctuation.definition.typeparameters.begin.mermaid
            '5':
              name: storage.type.mermaid
            '6':
              name: punctuation.definition.typeparameters.end.mermaid
        - comment: '(visibility)?(datatype/generic data type) (attribute name)$'
          match: !regex |-
            \s([\+~#-])? # visibility
            ([\w-]+) # datatype
            (~)? # ~
            ([\w-]+)? # datatype
            (~)? # ~
            \s([\w-]+)?$ # attribute name
          captures:
            '1':
              name: keyword.control.mermaid
            '2':
              name: storage.type.mermaid
            '3':
              name: punctuation.definition.typeparameters.begin.mermaid
            '4':
              name: storage.type.mermaid
            '5':
              name: punctuation.definition.typeparameters.end.mermaid
            '6':
              name: entity.name.variable.field.mermaid
        - comment: '<<(Annotation)>> (class name)'
          match: !regex |-
            (<<) # <<
            ([\w-]+) # annotation
            (>>) # >>
            \s?([\w-]+)? # class name
          captures:
            '1':
              name: punctuation.definition.typeparameters.begin.mermaid
            '2':
              name: storage.type.mermaid
            '3':
              name: punctuation.definition.typeparameters.end.mermaid
            '4':
              name: entity.name.type.class.mermaid
      end: (})
      endCaptures:
        '1':
          name: keyword.control.mermaid
    - comment: 'class (class name) ~?(generic type)?~?'
      match: !regex |-
        (class)\s+ #class
        ([\w-]+) # class name
        (~)? # ~
        ([\w-]+)? # generic type name
        (~)? # ~
      captures:
        '1':
          name: keyword.control.mermaid
        '2':
          name: entity.name.type.class.mermaid
        '3':
          name: punctuation.definition.typeparameters.begin.mermaid
        '4':
          name: storage.type.mermaid
        '5':
          name: punctuation.definition.typeparameters.end.mermaid

  end: (^|\G)(?=\s*[`~]{3,}\s*$)
scopeName: source.mermaid
